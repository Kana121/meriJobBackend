package com.job_finder.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.job_finder.entity.UserDtls;
import com.job_finder.helperClass.LoginForm;
import com.job_finder.helperClass.RegistrationForm;
import com.job_finder.repository.UserRepository;
import com.job_finder.response.LoginMessage;

@Service
public class UserServiceImpl implements UserService{
	@Autowired
	private UserRepository userRepository;

	 @Autowired
	 private PasswordEncoder passwordEncoder;
	    @Override
	    public List<UserDtls> getAllUsers() {
	        return userRepository.findAll();
	    }

	    @Override
	    public Optional<UserDtls> getUserById(Long userId) {
	        return userRepository.findById(userId);
	    }

	    @Override
	    public boolean createUser(UserDtls user) {
	    	userRepository.save(user);
	        return true;
	    }

	    @Override
	    public UserDtls updateUser(Long userId, UserDtls updatedUser) {
	        Optional<UserDtls> optionalUser = userRepository.findById(userId);
	        if (optionalUser.isPresent()) {
	            UserDtls existingUser = optionalUser.get();
	            existingUser.setFullName(updatedUser.getFullName());
	            existingUser.setEmailId(updatedUser.getEmailId());
	            existingUser.setMobileNumber(updatedUser.getMobileNumber());
	            existingUser.setUsername(updatedUser.getUsername());
	            existingUser.setPassword(updatedUser.getPassword());
	            existingUser.setDescription(updatedUser.getDescription());
	            existingUser.setWorkStatus(updatedUser.getWorkStatus());
	            existingUser.setResume(updatedUser.getResume());

	            return userRepository.save(existingUser);
	        } else {
	            // Handle user not found
	            return null;
	        }
	    }

	    @Override
	    public void deleteUser(Long userId) {
	        userRepository.deleteById(userId);
	    }

	    @Override
	    public Optional<UserDtls> getUserDetailsById(Long userId) {
	        Optional<UserDtls> optionalUser = userRepository.findById(userId);

	        return optionalUser.map(user -> {
	            UserDtls userDtls = new UserDtls();
	            userDtls.setFullName(user.getFullName());
	            userDtls.setEmailId(user.getEmailId());
	            userDtls.setMobileNumber(user.getMobileNumber());
	            userDtls.setUsername(user.getUsername());
	            userDtls.setDescription(user.getDescription());
	            userDtls.setWorkStatus(user.getWorkStatus());
	            return userDtls;
	        });
	    }

	    @Override
	    public String addEmployee(RegistrationForm form) {

	        UserDtls user = new UserDtls();
	        user.setFullName(form.getFullName());
	        user.setEmailId(form.getEmailId());
	        user.setMobileNumber(form.getMobileNumber());
	        user.setUsername(form.getUsername());
	        user.setPassword(this.passwordEncoder.encode(form.getPassword()));
	        user.setDescription(form.getDescription());
	        user.setWorkStatus(form.getWorkStatus());

	        userRepository.save(user);
	        return user.getFullName();
		}

		@Override
		public LoginMessage loginEmployee(LoginForm loginForm) {
			String msg="";
			UserDtls user=userRepository.findByEmailId(loginForm.getEmail());
			if(user != null) {
				String password=loginForm.getPassword();
//				String email=loginForm.getEmail();
				String encodedPassword=user.getPassword();
				Boolean isPresent=passwordEncoder.matches(password, encodedPassword);
				if(isPresent) {
					userRepository.findOneByEmailAndPassword(loginForm.getEmail(),encodedPassword);
				}
			}
			return null;
		}

}
